<% include top %>

<div id="alert_error" class="alert alert-danger">
  <strong>Error!</strong> Cannot connect to message broker. <a href="." class="alert-link">RETRY</a>.
</div>

<div id="alert_warning" class="alert alert-warning">
  Trying to connect to message broker. <a href="." class="alert-link">RETRY</a>.
</div>

<div id="alert_event" class="alert alert-dark">
  No Recorded Events.
</div>

<div id="mapid" class="container-fluid"></div>

<!-- <script src="/javascripts/leaflet-heat.js"></script> -->
<script src="/javascripts/heatmap.js"></script>

<!-- <script src="/javascripts/leaflet-heatmap.js"></script> -->

<script type="text/JavaScript" src="/javascripts/mapSensors.js"></script>

<script>
  document.getElementById("alert_error").style.display = "none";
  document.getElementById("alert_warning").style.display = "none";

  //GLOBALS
  var INITIAL_ZOOM          = 10;
  var CIRCLE_RADIUS_DEFAULT = 4;
  var STATUS_COLOR_STROKE   = "#3333bb";
  var STATUS_COLOR_UNKNOWN  = "#3333bb";
  var STATUS_COLOR_ACTIVE   = "#33bb33";
  var STATUS_COLOR_INACTIVE = "#bb3333";
  var STATUS_COLOR_MOVING   = "#ffa500";
  var STATUS_COLOR_NOT_SSN  = "#777777";

  //var MQTT_HOSTNAME = "localhost"
  //var MQTT_HOSTNAME = "templo.ict.uevora.pt"
  var MQTT_HOSTNAME        = "server1.particle-summary.pt"
  var MQTT_PORT            = 18840
  var MQTT_CLIENT_ID       = "ssnWebClientId"+ Math.random().toString(16).substr(2, 8)
  //var MQTT_CLIENT_ID = "ssnWebClientId_0001"
  var MQTT_TOPIC_SUB_MAIN  = "ssnalentejo/#"
  var MQTT_TOPIC_SUB_INFO  = "info"
  var MQTT_TOPIC_SUB_EVENT = "event"
  
  var TIMER_PERIOD_MS      = 1000;
  var TIME_INACTIVE_MS     = 5000;
  
  var TIMER = setInterval(sensorTimerProcessing, TIMER_PERIOD_MS);

</script>

<script type="text/JavaScript" src="/javascripts/paho-mqtt.js"></script>
<script type="text/JavaScript" src="/javascripts/mqtt-client.js"></script>

<script>

  mqtt_init();

  //
  document.getElementById("mapid").width =document.documentElement.clientWidth;
  document.getElementById("mapid").height=document.documentElement.clientHeight;
  
  //var mymap = L.map('mapid').setView([38.5714, -7.9135], 13);
  var mymap = L.map('mapid');

  L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.{ext}', {
    attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
    subdomains: 'abcd',
    minZoom: 0,
    maxZoom: 18,
    ext: 'png'
  })
  .addTo(mymap);

  L.control.scale().addTo(mymap);

  mymap.on('click', function(ev){
    var latlng = mymap.mouseEventToLatLng(ev.originalEvent);
    console.log(latlng.lat + ' , ' + latlng.lng);
  });

  //while creating page: parse sensors and build 
  //first sensor map to show (info is from DB, not live)

  <%
  if (sensorlist) {
     sensorlist.forEach(function(sensor) {
      %>

      addSensorFieldsToMap(
        '<%=sensor.sensorkey%>', 
        '<%=sensor.name%>',
        '<%=sensor.model%>',
        <%=sensor.latitude%>,
        <%=sensor.longitude%>,
        <%=sensor.elevation%>,
        '<%=sensor.sensor_URL%>',
        '<%=sensor.data_URL%>',
        0);

      addMarkerToMap(sensorMap.get('<%=sensor.sensorkey%>'));
      //addMarkerToMap(sensorMap['<%=sensor.sensorkey%>']);

      <%

     });
  }

  %>

  if (sensorMap.size!=0) {
    var sensor=sensorMap.values().next().value;
    mymap.setView(
      new L.LatLng(
          sensor.latitude, 
          sensor.longitude), 
          INITIAL_ZOOM);
  }

</script>

<% include bottom %>
